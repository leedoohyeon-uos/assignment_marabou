#!/bin/bash

# Marabou MNIST 검증 프로젝트 실행 스크립트
# 사용법: ./run_verification.sh [옵션]

set -e  # 오류 발생 시 스크립트 중단

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 로그 함수
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 도움말 출력
show_help() {
    echo "Marabou MNIST 검증 프로젝트 실행 스크립트"
    echo ""
    echo "사용법: $0 [옵션]"
    echo ""
    echo "옵션:"
    echo "  -h, --help          이 도움말 출력"
    echo "  -e, --epsilon VALUE epsilon 값 설정 (기본값: 0.1)"
    echo "  -t, --timeout VALUE timeout 값 설정 (기본값: 60)"
    echo "  -i, --image INDEX   테스트 이미지 인덱스 (기본값: 0)"
    echo "  -s, --skip-train    모델 훈련 건너뛰기"
    echo "  -v, --verbose       자세한 출력"
    echo "  -d, --docker        Docker 환경에서 실행"
    echo "  -c, --clean         이전 결과 파일 정리"
    echo ""
    echo "예시:"
    echo "  $0                           # 기본 설정으로 실행"
    echo "  $0 -e 0.05 -t 120           # epsilon=0.05, timeout=120초"
    echo "  $0 -s -v                    # 훈련 건너뛰고 자세한 출력"
    echo "  $0 -d                       # Docker 환경에서 실행"
}

# 기본값 설정
EPSILON=0.1
TIMEOUT=60
IMAGE_INDEX=0
SKIP_TRAIN=false
VERBOSE=false
DOCKER=false
CLEAN=false

# 명령행 인수 파싱
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -e|--epsilon)
            EPSILON="$2"
            shift 2
            ;;
        -t|--timeout)
            TIMEOUT="$2"
            shift 2
            ;;
        -i|--image)
            IMAGE_INDEX="$2"
            shift 2
            ;;
        -s|--skip-train)
            SKIP_TRAIN=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -d|--docker)
            DOCKER=true
            shift
            ;;
        -c|--clean)
            CLEAN=true
            shift
            ;;
        *)
            log_error "알 수 없는 옵션: $1"
            show_help
            exit 1
            ;;
    esac
done

# 정리 함수
cleanup() {
    if [ "$CLEAN" = true ]; then
        log_info "이전 결과 파일 정리 중..."
        rm -f mnist_mlp_small.onnx
        rm -f marabou_verification_result.png
        rm -f *.log
        rm -rf data/
        rm -rf __pycache__/
        log_success "정리 완료"
    fi
}

# 환경 검사
check_environment() {
    log_info "환경 검사 중..."
    
    # Python 버전 확인
    if ! command -v python3 &> /dev/null; then
        log_error "Python3가 설치되지 않았습니다."
        exit 1
    fi
    
    PYTHON_VERSION=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    log_info "Python 버전: $PYTHON_VERSION"
    
    # 필수 패키지 확인
    log_info "필수 패키지 확인 중..."
    
    python3 -c "import torch; print(f'PyTorch 버전: {torch.__version__}')" 2>/dev/null || {
        log_error "PyTorch가 설치되지 않았습니다."
        log_info "설치 명령: pip install torch torchvision"
        exit 1
    }
    
    python3 -c "import maraboupy; print('Marabou 설치 확인됨')" 2>/dev/null || {
        log_error "Marabou가 설치되지 않았습니다."
        log_info "설치 명령: pip install maraboupy"
        exit 1
    }
    
    log_success "환경 검사 완료"
}

# Docker 환경 설정
setup_docker() {
    if [ "$DOCKER" = true ]; then
        log_info "Docker 환경 설정 중..."
        
        # Docker 이미지 존재 확인
        if ! docker image inspect marabou-mnist &> /dev/null; then
            log_info "Docker 이미지 빌드 중..."
            docker build -t marabou-mnist .
        fi
        
        # Docker 컨테이너에서 실행
        log_info "Docker 컨테이너에서 실행 중..."
        docker run -it --rm \
            -v $(pwd):/app \
            -e EPSILON=$EPSILON \
            -e TIMEOUT=$TIMEOUT \
            -e IMAGE_INDEX=$IMAGE_INDEX \
            -e SKIP_TRAIN=$SKIP_TRAIN \
            -e VERBOSE=$VERBOSE \
            marabou-mnist \
            bash -c "cd /app && ./run_verification.sh"
        exit 0
    fi
}

# 모델 훈련
train_model() {
    if [ "$SKIP_TRAIN" = false ]; then
        log_info "MNIST 모델 훈련 시작..."
        
        if [ "$VERBOSE" = true ]; then
            python3 mnist_model_creation.py
        else
            python3 mnist_model_creation.py > /dev/null 2>&1
        fi
        
        if [ $? -eq 0 ]; then
            log_success "모델 훈련 및 ONNX 변환 완료"
        else
            log_error "모델 훈련 실패"
            exit 1
        fi
    else
        log_info "모델 훈련 건너뛰기"
        
        if [ ! -f "mnist_mlp_small.onnx" ]; then
            log_error "ONNX 모델 파일이 존재하지 않습니다."
            log_info "훈련을 건너뛰려면 먼저 모델을 생성하세요."
            exit 1
        fi
    fi
}

# Marabou 검증 실행
run_verification() {
    log_info "Marabou 검증 시작..."
    log_info "설정: epsilon=$EPSILON, timeout=$TIMEOUT, image_index=$IMAGE_INDEX"
    
    # Python 스크립트에 파라미터 전달
    export VERIFICATION_EPSILON=$EPSILON
    export VERIFICATION_TIMEOUT=$TIMEOUT
    export VERIFICATION_IMAGE_INDEX=$IMAGE_INDEX
    export VERIFICATION_VERBOSE=$VERBOSE
    
    # 검증 실행
    python3 marabou_verification.py
    
    if [ $? -eq 0 ]; then
        log_success "검증 완료"
        
        # 결과 파일 확인
        if [ -f "marabou_verification_result.png" ]; then
            log_info "결과 시각화 저장됨: marabou_verification_result.png"
        fi
    else
        log_error "검증 실패"
        exit 1
    fi
}

# 결과 요약
show_summary() {
    log_info "실행 요약:"
    echo "  - Epsilon: $EPSILON"
    echo "  -